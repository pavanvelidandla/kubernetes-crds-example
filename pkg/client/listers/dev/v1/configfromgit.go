/*
Copyright 2018 The Openshift Evangelists

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
	v1 "crds/pkg/apis/dev.kubernetes.pavanvelidandla.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigFromGitLister helps list ConfigFromGits.
type ConfigFromGitLister interface {
	// List lists all ConfigFromGits in the indexer.
	List(selector labels.Selector) (ret []*v1.ConfigFromGit, err error)
	// ConfigFromGits returns an object that can list and get ConfigFromGits.
	ConfigFromGits(namespace string) ConfigFromGitNamespaceLister
	ConfigFromGitListerExpansion
}

// configFromGitLister implements the ConfigFromGitLister interface.
type configFromGitLister struct {
	indexer cache.Indexer
}

// NewConfigFromGitLister returns a new ConfigFromGitLister.
func NewConfigFromGitLister(indexer cache.Indexer) ConfigFromGitLister {
	return &configFromGitLister{indexer: indexer}
}

// List lists all ConfigFromGits in the indexer.
func (s *configFromGitLister) List(selector labels.Selector) (ret []*v1.ConfigFromGit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ConfigFromGit))
	})
	return ret, err
}

// ConfigFromGits returns an object that can list and get ConfigFromGits.
func (s *configFromGitLister) ConfigFromGits(namespace string) ConfigFromGitNamespaceLister {
	return configFromGitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigFromGitNamespaceLister helps list and get ConfigFromGits.
type ConfigFromGitNamespaceLister interface {
	// List lists all ConfigFromGits in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ConfigFromGit, err error)
	// Get retrieves the ConfigFromGit from the indexer for a given namespace and name.
	Get(name string) (*v1.ConfigFromGit, error)
	ConfigFromGitNamespaceListerExpansion
}

// configFromGitNamespaceLister implements the ConfigFromGitNamespaceLister
// interface.
type configFromGitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigFromGits in the indexer for a given namespace.
func (s configFromGitNamespaceLister) List(selector labels.Selector) (ret []*v1.ConfigFromGit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ConfigFromGit))
	})
	return ret, err
}

// Get retrieves the ConfigFromGit from the indexer for a given namespace and name.
func (s configFromGitNamespaceLister) Get(name string) (*v1.ConfigFromGit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("configfromgit"), name)
	}
	return obj.(*v1.ConfigFromGit), nil
}
